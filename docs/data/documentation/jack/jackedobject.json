{
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/ObservableObject",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " with the ability to share its properties automatically with a ",
      "type" : "text"
    },
    {
      "code" : "JXContext",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This allows an embedded JavaScript context to access the properties and invoke the functions of the containing object.",
      "type" : "text"
    }
  ],
  "hierarchy" : {
    "paths" : [
      [
        "doc:\/\/Jack\/documentation\/Jack"
      ]
    ]
  },
  "identifier" : {
    "interfaceLanguage" : "swift",
    "url" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject"
  },
  "kind" : "symbol",
  "metadata" : {
    "externalID" : "s:4Jack12JackedObjectP",
    "fragments" : [
      {
        "kind" : "keyword",
        "text" : "protocol"
      },
      {
        "kind" : "text",
        "text" : " "
      },
      {
        "kind" : "identifier",
        "text" : "JackedObject"
      }
    ],
    "modules" : [
      {
        "name" : "Jack"
      }
    ],
    "navigatorTitle" : [
      {
        "kind" : "identifier",
        "text" : "JackedObject"
      }
    ],
    "role" : "symbol",
    "roleHeading" : "Protocol",
    "symbolKind" : "protocol",
    "title" : "JackedObject"
  },
  "primaryContentSections" : [
    {
      "declarations" : [
        {
          "languages" : [
            "swift"
          ],
          "platforms" : [
            "macOS"
          ],
          "tokens" : [
            {
              "kind" : "keyword",
              "text" : "protocol"
            },
            {
              "kind" : "text",
              "text" : " "
            },
            {
              "kind" : "identifier",
              "text" : "JackedObject"
            },
            {
              "kind" : "text",
              "text" : " : "
            },
            {
              "kind" : "typeIdentifier",
              "preciseIdentifier" : "s:7Combine16ObservableObjectP",
              "text" : "ObservableObject"
            }
          ]
        }
      ],
      "kind" : "declarations"
    },
    {
      "content" : [
        {
          "anchor" : "overview",
          "level" : 2,
          "text" : "Overview",
          "type" : "heading"
        },
        {
          "inlineContent" : [
            {
              "text" : "This type extends from ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", which is a type of object with a publisher that emits before the object has changed.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            "class EnhancedObj : JackedObject {",
            "    @Track var x = 0 \/\/ unexported to jxc",
            "    @Stack var i = 1 \/\/ number exported as \"i\"",
            "    @Stack(\"B\") var b = false \/\/ boolean exported as \"B\"",
            "    @Pack var id = UUID() \/\/ codable exported as \"id\"",
            "",
            "    @Jack(\"now\") private var _now = now \/\/ function re-exported via property named \"now\"",
            "    func now() -> Date { Date(timeIntervalSince1970: 1_234) }",
            "}",
            "",
            "let obj = EnhancedObj()",
            "let jxc = try obj.jack().ctx",
            "",
            "try jxc.eval(\"typeof x\").stringValue == \"undefined\"",
            "try jxc.eval(\"typeof i\").stringValue == \"number\"",
            "",
            "try jxc.eval(\"typeof b\").stringValue == \"undefined\"",
            "try jxc.eval(\"typeof B\").stringValue == \"boolean\"",
            "",
            "try jxc.eval(\"typeof id\").stringValue == \"string\"",
            "",
            "try jxc.eval(\"typeof now\").stringValue == \"function\"",
            "try jxc.eval(\"typeof now()\").stringValue == \"object\"",
            "try jxc.eval(\"now()\").numberValue ==  1_234_000"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "In addition, a ",
              "type" : "text"
            },
            {
              "code" : "JackedObject",
              "type" : "codeVoice"
            },
            {
              "text" : " synthesizes an ",
              "type" : "text"
            },
            {
              "code" : "objectWillChange",
              "type" : "codeVoice"
            },
            {
              "text" : " publisher that",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "emits the changed value before any of its wrapped properties changes.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        },
        {
          "code" : [
            " class Contact : JackedObject {",
            "     @Stack var name: String",
            "     @Stack var age: Int",
            "",
            "     init(name: String, age: Int) {",
            "        self.name = name",
            "        self.age = age",
            "     }",
            "",
            "     @Jack(\"haveBirthday\") var _haveBirthday = haveBirthday",
            "     func haveBirthday() -> Int {",
            "        age += 1",
            "        return age",
            "     }",
            " }",
            "",
            "let john = Contact(name: \"John Appleseed\", age: 24)",
            "let jxc = try john.jack().ctx",
            "",
            "var changes = 0",
            "let cancellable = john.objectWillChange",
            ".sink { _ in",
            "    changes += 1",
            "}",
            "",
            "XCTAssertEqual(25, john.haveBirthday())",
            "XCTAssertEqual(1, changes)",
            "",
            "XCTAssertEqual(26, try jxc.eval(\"haveBirthday()\").numberValue)",
            "XCTAssertEqual(2, changes)",
            "",
            "let _ = cancellable"
          ],
          "syntax" : null,
          "type" : "codeListing"
        },
        {
          "inlineContent" : [
            {
              "text" : "Note: even though ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : " extends ",
              "type" : "text"
            },
            {
              "identifier" : "doc:\/\/Jack\/documentation\/Jack\/ObservableObject",
              "isActive" : true,
              "type" : "reference"
            },
            {
              "text" : ", and can be used",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "in its place in SwiftUI hierarchies with ",
              "type" : "text"
            },
            {
              "code" : "@EnvironmentObject",
              "type" : "codeVoice"
            },
            {
              "text" : ", it is ",
              "type" : "text"
            },
            {
              "inlineContent" : [
                {
                  "text" : "not",
                  "type" : "text"
                }
              ],
              "type" : "emphasis"
            },
            {
              "text" : " possible to",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "mix ",
              "type" : "text"
            },
            {
              "code" : "@Published",
              "type" : "codeVoice"
            },
            {
              "text" : " and ",
              "type" : "text"
            },
            {
              "code" : "@Stack",
              "type" : "codeVoice"
            },
            {
              "text" : " properties in the same object. Doing so will",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "result in a crash at initialization time. In order to support ",
              "type" : "text"
            },
            {
              "code" : "@Published",
              "type" : "codeVoice"
            },
            {
              "text" : "behavior",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "without needing to export the property to the JSC, use the equivalent ",
              "type" : "text"
            },
            {
              "code" : "@Track",
              "type" : "codeVoice"
            },
            {
              "text" : " wrapper,",
              "type" : "text"
            },
            {
              "text" : " ",
              "type" : "text"
            },
            {
              "text" : "which will behave the same way.",
              "type" : "text"
            }
          ],
          "type" : "paragraph"
        }
      ],
      "kind" : "content"
    }
  ],
  "relationshipsSections" : [
    {
      "identifiers" : [
        "doc:\/\/Jack\/7Combine16ObservableObjectP"
      ],
      "kind" : "relationships",
      "title" : "Inherits From",
      "type" : "inheritsFrom"
    },
    {
      "identifiers" : [
        "doc:\/\/Jack\/documentation\/Jack\/JackPod"
      ],
      "kind" : "relationships",
      "title" : "Inherited By",
      "type" : "inheritedBy"
    },
    {
      "identifiers" : [
        "doc:\/\/Jack\/documentation\/Jack\/JackedReference"
      ],
      "kind" : "relationships",
      "title" : "Conforming Types",
      "type" : "conformingTypes"
    }
  ],
  "schemaVersion" : {
    "major" : 0,
    "minor" : 2,
    "patch" : 0
  },
  "sections" : [

  ],
  "topicSections" : [
    {
      "identifiers" : [
        "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/objectWillChange"
      ],
      "title" : "Instance Properties"
    },
    {
      "identifiers" : [
        "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/inject(into:)",
        "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/jack(into:)"
      ],
      "title" : "Instance Methods"
    }
  ],
  "variants" : [
    {
      "paths" : [
        "\/documentation\/jack\/jackedobject"
      ],
      "traits" : [
        {
          "interfaceLanguage" : "swift"
        }
      ]
    }
  ]
, 
"references": {
"doc://Jack/7Combine16ObservableObjectP": {
  "identifier" : "doc:\/\/Jack\/7Combine16ObservableObjectP",
  "title" : "Combine.ObservableObject",
  "type" : "unresolvable"
},
"doc://Jack/documentation/Jack": {
  "abstract" : [
    {
      "text" : "Jack is a cross-platform framework that enables you to export",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "properties of your Swift classes to an embedded JavaScript environment,",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "enabling your app to provide scriptable extensions.",
      "type" : "text"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack",
  "kind" : "symbol",
  "role" : "collection",
  "title" : "Jack",
  "type" : "topic",
  "url" : "\/documentation\/jack"
},
"doc://Jack/documentation/Jack/JackPod": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackPod",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is a unit of native functionality that can be exported to a scripting environment via a ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "JackPod"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackPod",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "JackPod"
    }
  ],
  "role" : "symbol",
  "title" : "JackPod",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackpod"
},
"doc://Jack/documentation/Jack/JackedObject": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " is an ",
      "type" : "text"
    },
    {
      "identifier" : "doc:\/\/Jack\/documentation\/Jack\/ObservableObject",
      "isActive" : true,
      "type" : "reference"
    },
    {
      "text" : " with the ability to share its properties automatically with a ",
      "type" : "text"
    },
    {
      "code" : "JXContext",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "This allows an embedded JavaScript context to access the properties and invoke the functions of the containing object.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "protocol"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "JackedObject"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "JackedObject"
    }
  ],
  "role" : "symbol",
  "title" : "JackedObject",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackedobject"
},
"doc://Jack/documentation/Jack/JackedObject/inject(into:)": {
  "abstract" : [
    {
      "text" : "Inject all this instance’s ",
      "type" : "text"
    },
    {
      "code" : "@Stack",
      "type" : "codeVoice"
    },
    {
      "text" : " and ",
      "type" : "text"
    },
    {
      "code" : "@Jack",
      "type" : "codeVoice"
    },
    {
      "text" : " properties into the JXValue object.",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "The resuling object will have properties created for each of the corresponding property",
      "type" : "text"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "wrappers in the ",
      "type" : "text"
    },
    {
      "code" : "JackedObject",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "inject"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "into"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5JXKit7JXValueC",
      "text" : "JXValue"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> ["
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5JXKit10JXPropertyV",
      "text" : "JXProperty"
    },
    {
      "kind" : "text",
      "text" : "]"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/inject(into:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "inject(into:)",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackedobject\/inject(into:)"
},
"doc://Jack/documentation/Jack/JackedObject/jack(into:)": {
  "abstract" : [
    {
      "text" : "Jack into the given context, exposing all this instance’s ",
      "type" : "text"
    },
    {
      "code" : "@Stack",
      "type" : "codeVoice"
    },
    {
      "text" : " properties into the given ",
      "type" : "text"
    },
    {
      "code" : "JXContext",
      "type" : "codeVoice"
    },
    {
      "text" : ".",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "func"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "jack"
    },
    {
      "kind" : "text",
      "text" : "("
    },
    {
      "kind" : "externalParam",
      "text" : "into"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5JXKit7JXValueC",
      "text" : "JXValue"
    },
    {
      "kind" : "text",
      "text" : ") "
    },
    {
      "kind" : "keyword",
      "text" : "throws"
    },
    {
      "kind" : "text",
      "text" : " -> "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:5JXKit7JXValueC",
      "text" : "JXValue"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/jack(into:)",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "jack(into:)",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackedobject\/jack(into:)"
},
"doc://Jack/documentation/Jack/JackedObject/objectWillChange": {
  "abstract" : [
    {
      "text" : "A publisher that emits before the object has changed.",
      "type" : "text"
    }
  ],
  "conformance" : {
    "availabilityPrefix" : [
      {
        "text" : "Available when",
        "type" : "text"
      }
    ],
    "conformancePrefix" : [
      {
        "text" : "Conforms when",
        "type" : "text"
      }
    ],
    "constraints" : [
      {
        "code" : "ObjectWillChangePublisher",
        "type" : "codeVoice"
      },
      {
        "text" : " is ",
        "type" : "text"
      },
      {
        "code" : "ObservableObjectPublisher",
        "type" : "codeVoice"
      },
      {
        "text" : ".",
        "type" : "text"
      }
    ]
  },
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "var"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "objectWillChange"
    },
    {
      "kind" : "text",
      "text" : ": "
    },
    {
      "kind" : "typeIdentifier",
      "preciseIdentifier" : "s:7Combine25ObservableObjectPublisherC",
      "text" : "ObservableObjectPublisher"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedObject\/objectWillChange",
  "kind" : "symbol",
  "role" : "symbol",
  "title" : "objectWillChange",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackedobject\/objectwillchange"
},
"doc://Jack/documentation/Jack/JackedReference": {
  "abstract" : [
    {
      "text" : "A ",
      "type" : "text"
    },
    {
      "code" : "JackedReference",
      "type" : "codeVoice"
    },
    {
      "text" : " is a concrete base class implementation of ",
      "type" : "text"
    },
    {
      "code" : "JackedObject",
      "type" : "codeVoice"
    },
    {
      "text" : " ",
      "type" : "text"
    },
    {
      "text" : "that tracks the instance’s native peer.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "class"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "JackedReference"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/JackedReference",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "JackedReference"
    }
  ],
  "role" : "symbol",
  "title" : "JackedReference",
  "type" : "topic",
  "url" : "\/documentation\/jack\/jackedreference"
},
"doc://Jack/documentation/Jack/ObservableObject": {
  "abstract" : [
    {
      "text" : "A type alias for the Combine framework’s type for an object with a publisher that emits before the object has changed.",
      "type" : "text"
    }
  ],
  "fragments" : [
    {
      "kind" : "keyword",
      "text" : "typealias"
    },
    {
      "kind" : "text",
      "text" : " "
    },
    {
      "kind" : "identifier",
      "text" : "ObservableObject"
    }
  ],
  "identifier" : "doc:\/\/Jack\/documentation\/Jack\/ObservableObject",
  "kind" : "symbol",
  "navigatorTitle" : [
    {
      "kind" : "identifier",
      "text" : "ObservableObject"
    }
  ],
  "role" : "symbol",
  "title" : "ObservableObject",
  "type" : "topic",
  "url" : "\/documentation\/jack\/observableobject"
}
}
}